Meine Gründe für die Erstellung einer eigenen Tasmota Version:
FW noch nicht im aktuellsten development Version erhältlich, also selber compilieren.
FW ist nicht in eigener Muttersprache erhältlich.
FW ist nicht an Standort angepasst. -> Sonnen-auf/-untergang, Zeitzone, Individualisierung
FW lässt sich Aufgrund unnötiger Treiber nicht/& mehr OTA flashen, oder ist prinzipiell zu
groß für Flashspeicher.
FW enthält Treiber, von denen Sie wissen, das Sie diese niemals benötigen.
FW enthält nicht die gewünschten Funktionsunterstützung.SCRIPT oder RULE,
alle mit berry, KNX, Domotiz, MATTER(ESP32(x)), globale Variablen, Dateisystem, GPIO Viewer,
& weitere Protokolle.

Meine verwendete Entwicklungsumgebung:
"Windows10" (bei mir) mit Microsoft "Visual Studio Code" compiliert.
CompilerLOG.txt zeigt Beispielhaft den Ablauf für einen ESP32 für selber compilierer als Vergleich.

Was muss gemacht werden ?
Firmware Tasmota development 14.3.0.1 oder aktueller von https://github.com/arendst/Tasmota -> 
<>Code -> Download ZIP herunterladen.
Tasmota Sourcecode habe ich bei mir nach D:\Tasmota als Basisverzeichnis entpackt.
evtl. entpacken und dann halt umbenennen, weil die PATH länge evtl. probleme bereitet.

Zum compilieren muss Internetverbindung funktionstüchtig & aktiv sein !
ping -t 141.1.1.1

seit TM14.1.0.3 hatte ich Probleme mit dem compilieren und habe das als Fehler gemeldet.
https://github.com/arendst/Tasmota/issues/21940

Bearbeiten Sie die "D:\Tasmota\platformio_override.ini" folgendermaßen um den Fehler zu vermeiden.

[platformio]
core_dir = D:\.plio
workspace_dir = D:\.pio

Die Änderung hat das compilieren wieder ermöglicht.

https://code.visualstudio.com/download
VSC installieren&starten und dann PlattformIO nachinstallieren.

Nach Grundinstallation habe ich erst mal diese CPU Varianten durch compiliert, um
Entwicklungsumgebung unverändert funktionstüchtig zu machen.
tasmota,tasmota-2M(experimentell),tasmota-4M,tasmota32,tasmota32s2,tasmota32c2,tasmota32c3,tasmota32c6,tasmota32s3

Nun passe ich mir die Tasmota Version an:
Der Source kann in möglicher neueren Version siehe oben geladen werden und die
bereitgestellten Konfigurationsfiles sollten auch in neue Source Version angepasst
angewendet werden können. 
Sie können Ihre wichtigsten Einstellungen in erstem File unterhalb anpassen
siehe MY_LANGUAGE, LATITUDE, LONGITUDE, APP_TIMEZONE aus
D:\Tasmota\tasmota\my_user_config.h lesen & Werte in MeineAngebotene/Ihre angepasste my_user_config.h eintragen.

my_user_config.h -> D:\Tasmota\tasmota\my_user_config.h kopieren.
tasmota_configurations_ESP32.h -> D:\Tasmota\tasmota\include\tasmota_configurations_ESP32.h anpassen/bearbeiten.

Diverse Dateien wurden hierzu angepasst und liegen in den Unterverzeichnissen.
Suchbegiff "by HofeBY" in diesen Dateien zeigt an wo ich was geändert habe.
D:\Tasmota\tasmota\user_config_override.h //hier hinein schreibe ich die gewünschte Konfiguration.
D:\Tasmota\tasmota\include\tasmota_configurations_ESP32.h // hier nach //"by HofeBY" nachsehen welche ich deaktivierte.

Die Datei D:\Tasmota\tasmota\my_user_config.h beinhaltet die möglichen Treiber Optionen zum rüberkopieren in die
D:\Tasmota\tasmota\my_user_config.h und nicht vergessen ein #undef TREIBERNAME davor zu setzen !

Ich habe schon mal folgende Versionen nach meiner Treiberauswahl compiliert:
tasmota,tasmota-2M(experimentell),tasmota-4M,tasmota32,tasmota32s2,tasmota32c2,tasmota32c3,tasmota32c6,tasmota32s3

Folgende Funktionen/Treiber sollten vorhanden sein und funktionieren.
Bitte Info falls nicht über "Issues" in github.com/HofeBY/Tasmota-Firmware :

Um die mit SCRIPT oder RULE Varianten compilieren zu können muss zwischen den Zeilen //=========... in 
user_config_override.h das jeweils ungewünschte  USE_SCRIPT oder RULE mit // auskommentiert deaktiviert werden.

Dann erneute Compilerläufe und Umbenennung der .bin Firmwares zweck´s Unterscheidung.
Beachte, ESP8285/ESP8266 können kein MATTER ! Das muss ein ESP32(x) in Vertretung erledigen.

Das liefern meine zuvor entleerten & neu gefüllten Varianten:
Deutsche Sprache & Zeitzone & Heimatstadt incl. DE NTP Server konfiguration
MQTT
Zeitplan
KNX mit TX1-TX9 Messwerte auch mit SCRIPT an KNX broker
MATTER & BERRY bei ESP32(x) Varianten, nicht bei ESP8285/ESP8266
DOMOTICZ
SCRIPT(mit erweitertem Dateisystem) und RULES beide mit MATTER
SENDMAIL
INFLUXDB
SerialBridge an CPU lokales Gerät
Seriell TCPBridge TCP Remote an CPU lokales Gerät
ModBus-Serial-Bridge TCP Remote an CPU lokales Gerät ModBus Gerät
SML Smart Meter Language für Stromzähler auslesen alle .bin ohne RULE im Namen
ESP32 und weitere Internes und SDCARD Filesystem mit http Zugriff zum speichern von Logfiles
Ping Support in Console
I2C, SPI, I2S, etc.pp
ESP32 intern Hall & CPU Temperatur Sensor
IR senden und empfangen von mir ungeprüft
WIFI_RANGE_EXTENDER
DS18x20 auch mit parasite Power T 
DS3231 RTC mit NTP-Server support (Zeitserver für offline Netzwerke) und internem Temperatursensor I2C
BMP-085-180-280/BME280 RH/T/P/Taupunkt I2C
BME68X RH/T/P/Taupunkt/Luftgüte I2C
AHT2x z.B. AHT21D RH/T/Taupunkt 2-5,5V I2C ist günstiger zu bekommen
PCF8574 8Bit zu TTL IO Adapter I2C
MCP23008/MCP23017 8/16 Bit IO zu TTL multi IO Adapter I2C
PCA9685 16xfach HW PWM Driver zu IO Adapter I2C
SCD40 CO2 Sensor I2C
SGP40 Luftqualität I2C
ENS160 VOC Luftgüte Sensor I2C mit unter mit AHT21 auf einer Platine
BH1750 Helligeit I2C

tasmota				von 2,7->8 kByte SCRIPT, kein Dateisystem möglich
tasmota-2M(experimentell)	von 2,7->8 kByte SCRIPT, 1MByte Dateisystem, nur selbst zu compilieren
tasmota-4M			von 2,7->8 kByte SCRIPT, 2MByte Dateisystem

ESP32(x)			von 8->16 kByte SCRIPT, 2()MByte Dateisystem

und noch viele weitere Treiber und Funktionen.
Im Ordner liegen die Firmware (.bin) Files, welche man OTA auf den ESP Varianten einspielen kann.
Ohne RULE im Namen ist mit SCRIPT und MATTER.
Die mit RULE sind mit MATTER aber ohne SCRIPT.

tasmota.bin für ESP8285 & ESP8266
tasmota32(x).bin für ESP32 Varianten /(factory) zur Erstinstallation

Um die eincompilierten I2C Treiber aufzulisten auf console "I2Cdriver" und die Nummer in Datei my_user_config nachsehen.

Erstmalig zur Erstinstallation des ESP32 habe ich zuvor mittels Chrome Browser "https://tasmota.github.io/install/"
Firmware Grundinstallation installiert.
Nun kann diese ".\*.bin" von hier über Oberfläche OTA eingespielt werden.
Compilieren Sie selbst eine Firmware, so liegt diese ".\build_output\firmware"
Jeweils nach FW Installtion im WLAN nach "tasmota-xxxxx" suchen und verbinden,
im Browser 192.168.4.1 öffnen und für Home WLAN Einbindung konfigurieren.
öffnen Sie nun im Home WLAN die angegebene IP im Home WLAN.

Für die SML SCRIPT Anwender empfehle ich mein Beispiel MT681-4xS0Impuls-Zaehler-script.txt .

=============================================================================================================
Ich verwende zum testen ein AZ-Delivery ESP32 DevKitCv4 Board, bei dem ich
Installiertes Tasmota. Ist nur ein Standardvorschlag, den ich halt so verwende.

unter "Einstellungen -> Sonstige Konfiguration" Haken(Vorlage) aktivieren & speichern

unter "Einstellungen -> Vorlage" konfigurieren die GPIO Ports belege ich wie folgend:

GPIO0 noch nicht belegt, aber dieser GPIO wird beim Programmieren benützt! z.B. als Taster bedienbar belegen
GPIO1 Serial Tx (geht ans USB zu TTL Programmier Adapter Rx) Logge so Console via Putty
GPIO3 Serial Rx (geht ans USB zu TTL Programmier Adapter Tx) Logge so Console via Putty
GPIO21 I2C SDA 1 (ist als I2C auf dem Board vorbelegt)
GPIO22 I2C SCL 1 (ist als I2C auf dem Board vorbelegt)
GPIO36 HallEffect 1 (Interner Hall Sensor für erste Werte) mit Magnet auf Blechschirmung
GPIO39 HallEffect 2 (Interner Hall Sensor für erste Werte) verändert den Hall Wert.
Dann in Console "SO146 1" um auch die CPU Temperatur anzuzeigen

I2C Bausteine werden an GPIO21/22 angeschlossen

unter "Einstellungen -> Gerät konfigurieren" können Sie dann die restlichen GPIO´s selbst belegen.

zurück ins Hauptmenü um erste Ergebnisse der Sensoren zu sehen und z.B. MQTTY zur Übertragung einzustellen.

Verbesserungen melden Sie an HofeBY unter:
github.com/arendst/Tasmota/discussions
https://github.com/arendst/Tasmota/discussions/22004#discussioncomment-10454400
forum.creationx.de/forum
https://forum.creationx.de/index.php?user/5142-hofeby/

Oberfränkische Grüße
HofeBY